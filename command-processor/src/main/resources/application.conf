processor {
  consumer {
    bootstrapServers = "localhost:9092"
    bootstrapServers = ${?KAFKA_BROKERS}

    commandTopics {
      competition = "competition-commands"
      competition = ${?COMPETITION_COMMANDS_TOPIC}

      academy = "academy-commands"
      academy = ${?ACADEMY_COMMANDS_TOPIC}
    }

    groupId = "competition-service"
    groupId = ${?SAGA_PROCESSOR_GROUP_ID}
  }

  producer {
    bootstrapServers = "localhost:9092"
    bootstrapServers = ${?KAFKA_BROKERS}
  }

  snapshotConfig {
    databasePath = "app-db/snapshots"
    databasePath = ${?DATABASE_PATH}
  }
  commandProcessor {
    eventsTopicPrefix = "event"
    eventsTopicPrefix = ${?EVENTS_TOPIC_PREFIx}

    competitionNotificationsTopic = "competition-events-global"
    competitionNotificationsTopic = ${?COMPETITION_NOTIFICATIONS_TOPIC}

    academyNotificationsTopic = "academy-events"
    academyNotificationsTopic = ${?ACADEMY_NOTIFICATIONS_TOPIC}

    commandCallbackTopic = "command-callback"
    commandCallbackTopic = ${?COMMAND_CALLBACK_TOPIC}

    actorIdleTimeoutMillis = 1800000
    actorIdleTimeoutMillis = ${?ACTOR_IDLE_TIMEOUT}
  }
}

akka.persistence.journal.plugin = "kafka-based-journal"

# My custom journal plugin
kafka-based-journal {
  # Class name of the plugin.
  class = "compman.compsrv.logic.actor.kafka.persistence.KafkaBasedEventJournal"
  # Dispatcher for the plugin actor.
  plugin-dispatcher = "akka.actor.default-dispatcher"
}


# Path to the snapshot store plugin to be used
akka.persistence.snapshot-store.plugin = "rocksdb-snapshot-store"

# My custom snapshot store plugin
rocksdb-snapshot-store {
  # Class name of the plugin.
  class = "docs.persistence.MySnapshotStore"
  # Dispatcher for the plugin actor.
  plugin-dispatcher = "akka.persistence.dispatchers.default-plugin-dispatcher"
}