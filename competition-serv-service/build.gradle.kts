import Dependencies.arrowkt
import Dependencies.jackson

/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id("competitions-mgr.java-conventions")
    kotlin("jvm") version "1.5.0"
    id("org.jetbrains.kotlin.plugin.spring") version "1.5.0-RC"
    id("org.springframework.boot") version "2.4.4"
}

apply {
    plugin("io.spring.dependency-management")
}


dependencies {
    arrowkt()
    jackson()
    implementation("javax.xml.ws:jaxws-api:2.3.1")
    implementation("org.springframework.kafka:spring-kafka")
    implementation("org.rocksdb:rocksdbjni:6.13.3")
    implementation(project(":competition-serv-model"))
    implementation(project(":compservice-annotations"))
    implementation("javax.ws.rs:javax.ws.rs-api:2.1")
    implementation("io.scalecube:scalecube-cluster:2.6.9") {
        exclude("io.projectreactor.netty")
    }
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-log4j2")
    implementation("org.springframework.boot:spring-boot-starter-webflux")
    implementation("org.springframework.boot:spring-boot-configuration-processor")
    implementation("org.springframework.boot:spring-boot-starter-cache")
    implementation("io.projectreactor.kotlin:reactor-kotlin-extensions")
    implementation("com.google.guava:guava:30.1-jre")
    implementation("org.jetbrains.kotlin:kotlin-stdlib")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core")
    testImplementation(kotlin("test-junit"))
    testImplementation("com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.apache.kafka:kafka-streams")
    testImplementation("org.apache.curator:curator-framework:4.0.1")
    testImplementation("org.apache.curator:curator-recipes:4.0.1")
    testImplementation("org.apache.curator:curator-test:4.0.1")
    testImplementation(group = "org.apache.kafka", "kafka-clients", classifier = "test")
    testImplementation(group = "org.apache.kafka", "kafka-streams", classifier = "test")
    testImplementation("org.apache.kafka:kafka_2.12:2.6.0")
    testImplementation(group = "org.apache.kafka", name = "kafka_2.12", version = "2.6.0", classifier = "test")
}
tasks.named<Test>("test") {
    useJUnitPlatform()
    maxHeapSize = "1024m"
    maxParallelForks = 4
    setForkEvery(100)
}

tasks.withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile>().configureEach {
    kotlinOptions {
        jvmTarget = "11"
    }
    incremental = true
}

description = "competition-serv-service"

val javaMainClass = "compman.compsrv.ZookeeperSessionTest"

tasks.register("runKafkaEmbedded", JavaExec::class) {
    val runFile: File = file("kafkarun")
    doFirst {
        runFile.createNewFile()
    }

    args(runFile.absolutePath)
    group = "embedded"
    this.isIgnoreExitValue = true
    classpath = sourceSets.main.get().runtimeClasspath + sourceSets.test.get().runtimeClasspath
    main = javaMainClass
    runFile.deleteOnExit()
    doLast {
        logger.lifecycle("Deleting file.")
        runFile.delete()
    }
}