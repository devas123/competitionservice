security:
  oauth2:
    client:
      clientId: competition-service
      clientSecret: test
      accessTokenUri: http://localhost:5000/uaa/oauth/token
      grant-type: client_credentials
      scope: server
    resource:
      user-info-uri: http://localhost:5000/uaa/users/current


spring:
  application:
    name: competition-service
  kafka:
    bootstrap-servers:



server:
  servlet.context-path: /competitions

mongodb:
  host: localhost
  username: compman
  password: compManagerPassword
  database: compservice
  port: 27017
  admindb: admin
  auth: false

communication:
  account-service: http://localhost:8089/
  frontend-callback-url: http://localhost:8080/

cluster:
  zookeeper:
    connect-timeout: 10000
    session-timeout: 20000
  enable-cluster: true
  advertised-host: "localhost"
  advertised-port: ${server.port}

kafka:
  stream-properties:
    application.id: test.app
    bootstrap.servers: ${kafka.bootstrap-servers}
    processing.guarantee: at_least_once
    cache.max.bytes.buffering: 0
  consumer:
    properties:
      bootstrap.servers: ${kafka.bootstrap-servers}
      group.id: compserv_consumer
      enable.auto.commit: true
      value.deserializer: compman.compsrv.kafka.serde.CommandDeserializer
      key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
    topics:
    - name: competition_commands
  producer:
    topic:
      name: competition_events
    properties:
     bootstrap.servers: ${kafka.bootstrap-servers}
     acks: "all"
     retries: 0
     linger.ms: 1
     key.serializer: org.apache.kafka.common.serialization.StringSerializer
     value.serializer: org.apache.kafka.common.serialization.StringSerializer
  default-topic-options:
    replication-factor: 1
    partitions: 4


management:
  endpoints.web.exposure.include: '*'
  server:
    port: 9001
    address: 127.0.0.1